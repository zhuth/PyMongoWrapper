# Generated from D:\PyMongoWrapper\QueryExpr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,365,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,5,11,177,8,11,10,11,12,
        11,180,9,11,1,11,1,11,1,11,1,11,5,11,186,8,11,10,11,12,11,189,9,
        11,1,11,1,11,1,11,5,11,194,8,11,10,11,12,11,197,9,11,1,11,3,11,200,
        8,11,1,12,1,12,1,12,1,12,3,12,206,8,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,3,17,
        225,8,17,1,17,3,17,228,8,17,1,18,4,18,231,8,18,11,18,12,18,232,1,
        19,1,19,3,19,237,8,19,1,19,1,19,1,20,3,20,242,8,20,1,20,1,20,1,20,
        3,20,247,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,257,8,
        22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,5,25,268,8,25,10,
        25,12,25,271,9,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
        37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
        48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,
        54,4,54,335,8,54,11,54,12,54,336,1,54,1,54,1,55,1,55,1,55,1,55,5,
        55,345,8,55,10,55,12,55,348,9,55,1,55,1,55,1,55,1,55,1,55,1,56,1,
        56,1,56,1,56,5,56,359,8,56,10,56,12,56,362,9,56,1,56,1,56,4,178,
        187,195,346,0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,0,27,0,29,0,31,0,33,0,35,13,37,0,39,0,41,0,43,0,45,14,
        47,15,49,16,51,17,53,0,55,18,57,19,59,20,61,21,63,22,65,23,67,24,
        69,25,71,26,73,27,75,28,77,29,79,30,81,31,83,32,85,33,87,34,89,35,
        91,36,93,37,95,38,97,39,99,40,101,41,103,42,105,43,107,44,109,45,
        111,46,113,47,1,0,13,9,0,34,34,39,39,47,47,92,92,98,98,102,102,110,
        110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,
        1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,49,1,0,48,51,
        1,0,48,53,6,0,100,100,104,105,109,109,115,115,119,119,121,121,5,
        0,35,35,65,90,95,95,97,122,128,65535,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,375,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,35,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
        0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,3,118,1,
        0,0,0,5,123,1,0,0,0,7,130,1,0,0,0,9,134,1,0,0,0,11,140,1,0,0,0,13,
        149,1,0,0,0,15,154,1,0,0,0,17,159,1,0,0,0,19,165,1,0,0,0,21,170,
        1,0,0,0,23,199,1,0,0,0,25,201,1,0,0,0,27,207,1,0,0,0,29,213,1,0,
        0,0,31,217,1,0,0,0,33,219,1,0,0,0,35,221,1,0,0,0,37,230,1,0,0,0,
        39,234,1,0,0,0,41,246,1,0,0,0,43,248,1,0,0,0,45,251,1,0,0,0,47,258,
        1,0,0,0,49,261,1,0,0,0,51,264,1,0,0,0,53,272,1,0,0,0,55,274,1,0,
        0,0,57,276,1,0,0,0,59,278,1,0,0,0,61,280,1,0,0,0,63,282,1,0,0,0,
        65,284,1,0,0,0,67,286,1,0,0,0,69,288,1,0,0,0,71,290,1,0,0,0,73,292,
        1,0,0,0,75,294,1,0,0,0,77,297,1,0,0,0,79,299,1,0,0,0,81,301,1,0,
        0,0,83,303,1,0,0,0,85,305,1,0,0,0,87,307,1,0,0,0,89,309,1,0,0,0,
        91,311,1,0,0,0,93,313,1,0,0,0,95,315,1,0,0,0,97,318,1,0,0,0,99,321,
        1,0,0,0,101,324,1,0,0,0,103,326,1,0,0,0,105,329,1,0,0,0,107,331,
        1,0,0,0,109,334,1,0,0,0,111,340,1,0,0,0,113,354,1,0,0,0,115,116,
        5,105,0,0,116,117,5,102,0,0,117,2,1,0,0,0,118,119,5,101,0,0,119,
        120,5,108,0,0,120,121,5,115,0,0,121,122,5,101,0,0,122,4,1,0,0,0,
        123,124,5,114,0,0,124,125,5,101,0,0,125,126,5,112,0,0,126,127,5,
        101,0,0,127,128,5,97,0,0,128,129,5,116,0,0,129,6,1,0,0,0,130,131,
        5,102,0,0,131,132,5,111,0,0,132,133,5,114,0,0,133,8,1,0,0,0,134,
        135,5,98,0,0,135,136,5,114,0,0,136,137,5,101,0,0,137,138,5,97,0,
        0,138,139,5,107,0,0,139,10,1,0,0,0,140,141,5,99,0,0,141,142,5,111,
        0,0,142,143,5,110,0,0,143,144,5,116,0,0,144,145,5,105,0,0,145,146,
        5,110,0,0,146,147,5,117,0,0,147,148,5,101,0,0,148,12,1,0,0,0,149,
        150,5,104,0,0,150,151,5,97,0,0,151,152,5,108,0,0,152,153,5,116,0,
        0,153,14,1,0,0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,5,117,
        0,0,157,158,5,101,0,0,158,16,1,0,0,0,159,160,5,102,0,0,160,161,5,
        97,0,0,161,162,5,108,0,0,162,163,5,115,0,0,163,164,5,101,0,0,164,
        18,1,0,0,0,165,166,5,110,0,0,166,167,5,117,0,0,167,168,5,108,0,0,
        168,169,5,108,0,0,169,20,1,0,0,0,170,171,3,55,27,0,171,172,3,51,
        25,0,172,22,1,0,0,0,173,178,5,34,0,0,174,177,3,25,12,0,175,177,3,
        33,16,0,176,174,1,0,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,179,
        1,0,0,0,178,176,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,200,
        5,34,0,0,182,187,5,39,0,0,183,186,3,25,12,0,184,186,3,33,16,0,185,
        183,1,0,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,188,1,0,0,0,187,
        185,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,200,5,39,0,0,191,
        195,5,96,0,0,192,194,9,0,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,
        196,1,0,0,0,195,193,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,
        200,5,96,0,0,199,173,1,0,0,0,199,182,1,0,0,0,199,191,1,0,0,0,200,
        24,1,0,0,0,201,205,5,92,0,0,202,206,7,0,0,0,203,206,3,27,13,0,204,
        206,3,29,14,0,205,202,1,0,0,0,205,203,1,0,0,0,205,204,1,0,0,0,206,
        26,1,0,0,0,207,208,5,117,0,0,208,209,3,31,15,0,209,210,3,31,15,0,
        210,211,3,31,15,0,211,212,3,31,15,0,212,28,1,0,0,0,213,214,5,120,
        0,0,214,215,3,31,15,0,215,216,3,31,15,0,216,30,1,0,0,0,217,218,7,
        1,0,0,218,32,1,0,0,0,219,220,8,2,0,0,220,34,1,0,0,0,221,224,3,37,
        18,0,222,223,5,46,0,0,223,225,3,37,18,0,224,222,1,0,0,0,224,225,
        1,0,0,0,225,227,1,0,0,0,226,228,3,39,19,0,227,226,1,0,0,0,227,228,
        1,0,0,0,228,36,1,0,0,0,229,231,7,3,0,0,230,229,1,0,0,0,231,232,1,
        0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,38,1,0,0,0,234,236,7,4,
        0,0,235,237,7,5,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,
        0,0,238,239,3,37,18,0,239,40,1,0,0,0,240,242,7,6,0,0,241,240,1,0,
        0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,247,7,3,0,0,244,245,5,50,
        0,0,245,247,7,7,0,0,246,241,1,0,0,0,246,244,1,0,0,0,247,42,1,0,0,
        0,248,249,7,8,0,0,249,250,7,3,0,0,250,44,1,0,0,0,251,252,3,41,20,
        0,252,253,5,58,0,0,253,256,3,43,21,0,254,255,5,58,0,0,255,257,3,
        43,21,0,256,254,1,0,0,0,256,257,1,0,0,0,257,46,1,0,0,0,258,259,3,
        35,17,0,259,260,7,9,0,0,260,48,1,0,0,0,261,262,5,100,0,0,262,263,
        3,23,11,0,263,50,1,0,0,0,264,269,3,53,26,0,265,268,7,3,0,0,266,268,
        3,53,26,0,267,265,1,0,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,
        1,0,0,0,269,270,1,0,0,0,270,52,1,0,0,0,271,269,1,0,0,0,272,273,7,
        10,0,0,273,54,1,0,0,0,274,275,5,58,0,0,275,56,1,0,0,0,276,277,5,
        59,0,0,277,58,1,0,0,0,278,279,5,123,0,0,279,60,1,0,0,0,280,281,5,
        125,0,0,281,62,1,0,0,0,282,283,5,40,0,0,283,64,1,0,0,0,284,285,5,
        41,0,0,285,66,1,0,0,0,286,287,5,91,0,0,287,68,1,0,0,0,288,289,5,
        93,0,0,289,70,1,0,0,0,290,291,5,44,0,0,291,72,1,0,0,0,292,293,5,
        43,0,0,293,74,1,0,0,0,294,295,5,61,0,0,295,296,5,62,0,0,296,76,1,
        0,0,0,297,298,5,45,0,0,298,78,1,0,0,0,299,300,5,42,0,0,300,80,1,
        0,0,0,301,302,5,47,0,0,302,82,1,0,0,0,303,304,5,37,0,0,304,84,1,
        0,0,0,305,306,5,46,0,0,306,86,1,0,0,0,307,308,5,38,0,0,308,88,1,
        0,0,0,309,310,5,124,0,0,310,90,1,0,0,0,311,312,5,62,0,0,312,92,1,
        0,0,0,313,314,5,60,0,0,314,94,1,0,0,0,315,316,5,62,0,0,316,317,5,
        61,0,0,317,96,1,0,0,0,318,319,5,60,0,0,319,320,5,61,0,0,320,98,1,
        0,0,0,321,322,5,33,0,0,322,323,5,61,0,0,323,100,1,0,0,0,324,325,
        5,61,0,0,325,102,1,0,0,0,326,327,5,37,0,0,327,328,5,37,0,0,328,104,
        1,0,0,0,329,330,5,126,0,0,330,106,1,0,0,0,331,332,5,36,0,0,332,108,
        1,0,0,0,333,335,7,11,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,334,
        1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,6,54,0,0,339,110,
        1,0,0,0,340,341,5,47,0,0,341,342,5,42,0,0,342,346,1,0,0,0,343,345,
        9,0,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,347,1,0,0,0,346,344,
        1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,5,42,0,0,350,351,
        5,47,0,0,351,352,1,0,0,0,352,353,6,55,0,0,353,112,1,0,0,0,354,355,
        5,47,0,0,355,356,5,47,0,0,356,360,1,0,0,0,357,359,8,12,0,0,358,357,
        1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,
        1,0,0,0,362,360,1,0,0,0,363,364,6,56,0,0,364,114,1,0,0,0,20,0,176,
        178,185,187,195,199,205,224,227,232,236,241,246,256,267,269,336,
        346,360,1,6,0,0
    ]

class QueryExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    SHORTCUT = 11
    STRING = 12
    NUMBER = 13
    TIME = 14
    TIME_INTERVAL = 15
    DATETIME = 16
    ID = 17
    Colon = 18
    Semicolon = 19
    LBrace = 20
    RBrace = 21
    LPar = 22
    RPar = 23
    LBrack = 24
    RBrack = 25
    Comma = 26
    Plus = 27
    Join = 28
    Minus = 29
    Star = 30
    Div = 31
    Mod = 32
    Dot = 33
    And = 34
    Or = 35
    Gt = 36
    Lt = 37
    Gte = 38
    Lte = 39
    Ne = 40
    Eq = 41
    Search = 42
    Tilde = 43
    Dollar = 44
    WS = 45
    COMMENT = 46
    LINE_COMMENT = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'repeat'", "'for'", "'break'", "'continue'", 
            "'halt'", "'true'", "'false'", "'null'", "':'", "';'", "'{'", 
            "'}'", "'('", "')'", "'['", "']'", "','", "'+'", "'=>'", "'-'", 
            "'*'", "'/'", "'%'", "'.'", "'&'", "'|'", "'>'", "'<'", "'>='", 
            "'<='", "'!='", "'='", "'%%'", "'~'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "SHORTCUT", "STRING", "NUMBER", "TIME", "TIME_INTERVAL", "DATETIME", 
            "ID", "Colon", "Semicolon", "LBrace", "RBrace", "LPar", "RPar", 
            "LBrack", "RBrack", "Comma", "Plus", "Join", "Minus", "Star", 
            "Div", "Mod", "Dot", "And", "Or", "Gt", "Lt", "Gte", "Lte", 
            "Ne", "Eq", "Search", "Tilde", "Dollar", "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "SHORTCUT", "STRING", "ESC", "UNICODE", 
                  "HEXCODE", "HEX", "SAFECODEPOINT", "NUMBER", "INT", "EXP", 
                  "HOUR", "MS60", "TIME", "TIME_INTERVAL", "DATETIME", "ID", 
                  "ALPHABETICS", "Colon", "Semicolon", "LBrace", "RBrace", 
                  "LPar", "RPar", "LBrack", "RBrack", "Comma", "Plus", "Join", 
                  "Minus", "Star", "Div", "Mod", "Dot", "And", "Or", "Gt", 
                  "Lt", "Gte", "Lte", "Ne", "Eq", "Search", "Tilde", "Dollar", 
                  "WS", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "QueryExpr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


